#define MyAppName "@CMAKE_PROJECT_NAME@"
#define MyAppVersion "@CMAKE_PROJECT_VERSION@"
#define MyAppPublisher "@PLUGIN_AUTHOR@"
#define MyAppURL "@PLUGIN_WEBSITE@"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{@UUID_APP@}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={code:GetDirName}
DefaultGroupName={#MyAppName}
OutputBaseFilename={#MyAppName}-{#MyAppVersion}-Windows-Installer
Compression=lzma
SolidCompression=yes
DirExistsWarning=no

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "..\release\Package\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\LICENSE"; Flags: dontcopy
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

; Could be used to "nullify" obs-ndi.dll (replace with an empty file) then delete this file at the end of the installation
; Source: "{app}\obs-ndi.dll"; DestDir: "{app}"; Flags: deleteafterinstall
; Source: "{app}\obs-ndi.pdb"; DestDir: "{app}"; Flags: deleteafterinstall 

[Icons]
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"

[InstallDelete]
; Remove previous obs-ndi plugin files (the hard-way)
Type: filesandordirs; Name: "{app}\data\obs-plugins\obs-ndi\"
Type: files; Name: "{app}\obs-plugins\64bit\obs-ndi.dll"
Type: files; Name: "{app}\obs-plugins\64bit\obs-ndi.pdb"

[Run]
; This uninstall the old obs-ndi after installation but before the final dialog when installing DistroAV
Filename: "{code:GetOldAppUninstallerPath}"; Parameters: "/VERYSILENT /NORESTART /SUPPRESSMSGBOXES"; Check: UninstallOldAppAvailable ;  Description: "Silently Uninstall OBS-NDI"
; Dev-note: Cannot use : Flags: skipifdoesntexist >> it only takes absolute filename.


[Code]
procedure InitializeWizard();
var
  GPLText: AnsiString;
  Page: TOutputMsgMemoWizardPage;
begin
  ExtractTemporaryFile('LICENSE');
  LoadStringFromFile(ExpandConstant('{tmp}\LICENSE'), GPLText);
  Page := CreateOutputMsgMemoPage(wpWelcome,
    'License Information', 'Please review the license terms before installing {#MyAppName}',
    'Press Page Down to see the rest of the agreement. Once you are aware of your rights, click Next to continue.',
    String(GPLText)
  );
end;

// credit where it's due :
// following function come from https://github.com/Xaymar/obs-studio_amf-encoder-plugin/blob/master/%23Resources/Installer.in.iss#L45
function GetDirName(Value: string): string;
var
  InstallPath: string;
begin
  // initialize default path, which will be returned when the following registry
  // key queries fail due to missing keys or for some different reason
  Result := '{autopf}\obs-studio';
  // query the first registry value; if this succeeds, return the obtained value
  if RegQueryStringValue(HKLM32, 'SOFTWARE\OBS Studio', '', InstallPath) then
    Result := InstallPath
end;


// Remove OBS-NDI - by @Trouffman for DistroAV

// Based on 4.14.0 AppId
const UninstallRegisterPath = 'Software\Microsoft\Windows\CurrentVersion\Uninstall\{A9039243-4FE7-45E7-8B11-7DC1ACB67B9D}_is1';

// Find out if the old App uninstaller exists
function GetOldAppUninstallerPath(Param: String): String;
var
  UninstallerPathRegistry: String;
// Param is required but not used.
begin
  result := '';
  // Check primary registry location
  if ( RegQueryStringValue(HKLM, UninstallRegisterPath, 'UninstallString', UninstallerPathRegistry) ) then
      result := RemoveQuotes(UninstallerPathRegistry)
  // Check alternative Registry location
  else if ( RegQueryStringValue(HKCU, UninstallRegisterPath, 'UninstallString', UninstallerPathRegistry) ) then
      result := RemoveQuotes(UninstallerPathRegistry);
 // else
      // No old-app uninstaller found
      // Assume no old-app exist or it is a manual install
  // end;
end;


// Check for the old App Uninstaller
function UninstallOldAppAvailable(): Boolean;
begin
  if (GetOldAppUninstallerPath('') <> '') then Result := True else Result := False;
end;
